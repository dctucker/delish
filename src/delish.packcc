%prefix "deli"

%auxil "struct deli_t *"

%header {
	#include "stdarg.h"
	#include "delikind.h"
	struct deli_t {
		const char *input;
		size_t offset;
		size_t length;
		void *parser;
	};
}

%source {
	#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
		if( !( dk##rule == dkComment || dk##rule == dkVLine || dk##rule > dkDefaultOp ) ) \
			deli_event(auxil, event, dk##rule, level, pos, buffer, length)
	#define PCC_GETCHAR(auxil) deli_get_character( auxil )
	#define PCC_BUFFERSIZE 1024

	#define NS(K)       __ = nodeString( auxil->parser, dk##K   , _1s, _1e, _1)
	#define CN(N, K, ...) __ = createNode##N( auxil->parser, dk##K, __VA_ARGS__ )
	#define CN0(K) __ = createNode0( auxil->parser, dk##K )
	#define CN1(K, ...) CN(1, K, __VA_ARGS__ )
	#define CN2(K, ...) CN(2, K, __VA_ARGS__ )
	#define CN3(K, ...) CN(3, K, __VA_ARGS__ )
	#define NA(P,S)     nodeAppend( auxil->parser, P, S )
	#define SL(X)       setLine( auxil->parser, X, _0s )

	#define GET_DK( _1, _2, _3, _4, NAME, ...) NAME
	#define DK(...) GET_DK( __VA_ARGS__, CN3, CN2, CN1, CN0)(__VA_ARGS__)

	int deli_get_character( struct deli_t *auxil )
	{
		if( auxil->offset >= auxil->length )
			return -1;
		return (auxil)->input[ auxil->offset++ ];
	}
}

Script        <- c:Code                                              { DK( Script, c ); }
Code          <-                                                     { DK( Code ); }
              (  Blank* l:VLine                                      { if( l >= 0 ) NA( $$, l ); }
              )+ Blank*
Blank         <- ( "\\" "\n" ) / "\t" / ' '
VLine         <-
              (  "\n"                                                { $$ = -1; }
              /  Comment                                             { $$ = -1; }
              /  a:Block                                             { $$ = a; }
              /  a:Statement Comment* "\n"                           { $$ = a; }
              )                                                      { if( $$ >= 0 ) SL($$); }
Comment       <- '#' (! "\n" .)* "\n"
Block         <-
              (  !'$'
               ( a:Conditional
               / a:DoLoop / a:WhileLoop / a:ForLoop
               / a:Function
               )
              /  a:Subshell
              )                                                      { DK( Block    , a ); SL(a); }
Statement     <-
              (  a:VariableStmt /  a:LocalStmt    /  a:ArgStmt
              /  a:EnvStmt      /  a:IncludeStmt  /  a:StreamStmt
              /  a:RunStmt      /  a:FunctionStmt /  a:BreakStmt
              /  a:ContinueStmt /  a:ReturnStmt   /  a:Push / a:Pop
              )                                                      { DK( Statement  , a ); SL(a); }
Conditional   <- "if" Blank+ e:Condition
                 Blank+ "{" _ c:Code? _ "}" _                        { DK( Conditional, e, c ); }
WhileLoop     <- "while" Blank+ e:Condition
                 Blank+ "{" _ c:Code? _ "}" _                        { DK( WhileLoop  , e, c ); }
DoLoop        <- "do" Blank+ "{" _ c:Code? _ "}" _
                 "while" Blank+ e:Condition                          { DK( DoLoop     , c, e ); }
ForLoop       <- "for" Blank+ v:Variable Blank+ "in" Blank+ e:IterExpr
                 Blank+ "{" _ c:Code? _ "}" _                        { DK( ForLoop    , v, e, c ); }
Function      <- !Keyword i:Identifier Blank*        "="
                 Blank* "{" _ c:Code? _ "}" _                        { DK( Function   , i, c ); }
Subshell      <- "sub" Blank+ "{" _ c:Code? _ "}" _                  { DK( Subshell   , c ); }
BreakStmt     <- "break"                                             { DK( BreakStmt ); }
ContinueStmt  <- "continue"                                          { DK( ContinueStmt ); }
ReturnStmt    <- "return"                                            { DK( ReturnStmt ); }
Push          <- "push"                                              { DK( Push ); }
Pop           <- "pop"                                               { DK( Pop ); }
VariableStmt  <- &'$' v:Variable Blank*
              (  o:AssignOp Blank* e:AssignExpr
              /  o:AppendOp Blank* e:AppendExpr
              /  o:RemoveOp Blank* e:AppendExpr
              )                                                      { DK( VariableStmt, v, o, e ); }
AssignExpr    <- ( e:OpenExpr / e:ArgExpr / e:Expr / e:RunStmt )     { $$ = e; }
AppendExpr    <- ( e:ArgExpr / e:Arg / e:VarDeref / e:ConstExpr )    { $$ = e; }
OpenExpr      <- "open" (Blank+ o:RedirOp)? Blank+ p:Path            { DK( OpenExpr, p, o); }
LocalStmt     <- "local" Blank+ v:Variable                           { DK( LocalStmt, v ); }
              (  Blank* "=" Blank* e:Expr                            { NA( $$, e ); }
              )?
ArgStmt       <- "arg"
                 ( a:ArgNames Blank* o:DefaultOp Blank* d:ArgDefault { DK( ArgStmt, a, o, d); }
                 / a:ArgNames                                        { DK( ArgStmt, a); }
                 )
EnvStmt       <- "env" Blank+ v:Variable                             { DK( EnvStmt, v ); }
                 (Blank* o:DefaultOp Blank* e:EnvDefault             { NA( $$, o ); NA( $$, e ); }
                 )?
IncludeStmt   <- "include" Blank+ s:StrLiteral                       { DK( IncludeStmt, s ); }
StreamStmt    <-
              (  v:Variable "." s:Stream Blank+ l:ExprList           { DK( StreamStmt,  v, s, l ); }
              /                 s:Stream Blank+ l:ExprList           { DK( StreamStmt,  s, l ); }
              )
RunStmt       <-
              (  f:RunFlags Blank+ "run"                             { DK( RunStmt, f ); }
              /  "run"                                               { DK( RunStmt ); }
              )  Blank+ i:Invocation                                 { NA( $$, i ); }
              (  Blank* "|" Blank* i:Invocation                      { NA( $$, i ); }
              )*
RunFlags      <-
              (  f:AsyncFlag                                         { DK( RunFlags, f ); }
              /  f:RedirFlag                                         { DK( RunFlags, f ); }
              /  (f1:AsyncFlag f2:RedirFlag)                         { DK( RunFlags, f1, f2 ); }
              )
FunctionStmt  <- i:Identifier                                        { DK( FunctionStmt, i ); SL(i); }
               ( Blank+ e:Expr                                       { NA( $$, e ); }
               )*
ArgDefault    <- e:ConstExpr                                         { DK( ArgDefault, e ); }
EnvDefault    <- e:ConstExpr                                         { DK( EnvDefault, e ); }
ExprList      <- e:Expr                                              { DK( ExprList, e ); }
               ( Blank* ',' Blank* e:Expr Blank*                     { NA( $$, e ); }
               )*
Invocation    <- c:Command                                           { DK( Invocation, c ); }
              (  Blank+ !'|' (e:Expr / e:String)                     { NA( $$, e ); }
              )*
ArgExpr       <- a:Arg (Blank+ / '=') e:Expr?                        { DK( ArgExpr, a, e ); }
ConstExpr     <-
              (  e:Integer / e:StrBlock / e:StrLiteral
              /  e:Boolean / e:Array / e:Object
              /  e:Path / e:JsonBlock
              )                                                      { $$ = e; }
Expr          <- (
                 "(" Blank+ s:MathExpr Blank+ ")"
               / s:Array / s:Object
               / s:Arg / s:VarDeref
               / s:StrBlock / s:StrLiteral / s:Integer / s:Boolean
               / s:BoolExpr
               / s:Path     / s:JsonBlock  / s:Stream
               )                                                     { DK( Expr, s); }
IterExpr      <- ( s:Array / s:VarDeref )                            { $$ = s; }
Condition     <- ( s:Arg / s:BoolExpr / s:VarDeref / s:Boolean )     { $$ = s; }
MathExpr      <- e1:Expr Blank+ o1:MathOp Blank+ e2:Expr             { DK( MathExpr, o1, e1, e2 ); }
              (          Blank+ o2:MathOp Blank+ e3:Expr             { DK( MathExpr, o2, $$, e3 ); }
              )*
MathOp        <- ( o:MulOp / o:DivOp / o:ModOp / o:AddOp / o:SubOp ) { $$ = o; }
MulOp         <- "*"                                                 { DK( MulOp ); }
DivOp         <- "/"                                                 { DK( DivOp ); }
ModOp         <- "%"                                                 { DK( ModOp ); }
AddOp         <- "+"                                                 { DK( AddOp ); }
SubOp         <- "-"                                                 { DK( SubOp ); }
BoolExpr      <-
              (  n:BoolNot Blank+ c:Comparison                       { DK( BoolExpr, DK( BoolNot, c ) ); }
              /  c:Comparison                                        { DK( BoolExpr, c ); }
              )
              (  Blank+ o:BoolOp2 Blank+ c:Comparison                { DK( BoolExpr, o, $$, c ); }
              /  Blank+ o:BoolOp2 Blank+ n:BoolNot c:Comparison      { DK( BoolExpr, o, $$, DK( BoolNot, c ) ); }
              )*
BoolOp2       <- o:BoolOr / o:BoolAnd                                { DK( BoolOp2, o ); }
BoolNot       <- "not"
BoolOr        <- "or"                                                { DK( BoolOr ); }
BoolAnd       <- "and"                                               { DK( BoolAnd ); }
Comparison    <- e1:CompExpr Blank+ o:Comparator Blank+ e2:CompExpr  { DK( Comparison, o, e1, e2 ); }
CompExpr      <-
              (  s:VarDeref / s:StrBlock / s:StrLiteral
              /  s:Integer / s:Boolean / s:Path
              )                                                      { $$ = s; }
Comparator    <- ( o:CompGe / o:CompGt
               /   o:CompLe / o:CompLt
               /   o:CompEq / o:CompNe )                             { $$ = o; }
CompGe        <- ">="                                                { DK( CompGe ); }
CompGt        <- ">"                                                 { DK( CompGt ); }
CompLe        <- "<="                                                { DK( CompLe ); }
CompLt        <- "<"                                                 { DK( CompLt ); }
CompEq        <- "=="                                                { DK( CompEq ); }
CompNe        <- "!="                                                { DK( CompNe ); }
VarDeref      <- &'$' n:Variable                                     { DK( VarDeref, n ); }
              (  "."
               ( s:StrLiteral / s:Integer
               / s:Variable   / s:Identifier  )                      { NA( $$, s ); }
              )*
RedirFlag     <- "redir"                                             { DK( RedirFlag ); }
              (  Blank+
               ( i:VarDeref / i:Path / i:Stream )
                 Blank* r:RedirOp Blank*
               ( o:VarDeref / o:Path / o:Stream )                    { NA( r, i ); NA( r, o ); NA( $$, r ); }
              )+
AsyncFlag     <- "async"                                             { DK( AsyncFlag ); }
ArgNames      <- ( Blank+ a:Arg )+                                   { DK( ArgNames, a); }
Arg           <- &'-'
              (  l:ArgLong                                           { DK( Arg, l ); }
              /  s:ArgShort                                          { DK( Arg, s ); }
              )
Array         <- "[" Blank* "]"                                      { DK( Array ); }
              /  '['                                                 { DK( Array ); }
              (  _ e:Expr                                            { NA( $$, e ); }
                 Blank* ','? _
              )* ']'
Object        <- '['                                                 { DK( Object ); }
              (  _ p:Pair                                            { NA( $$, p ); }
                 Blank* ','? _
              )+ ']'
Pair          <- k:Expr Blank* ':' Blank* v:Expr                     { DK( Pair, k, v ); }
JsonBlock     <- "json" Blank+ s:StrBlock                            { DK( JsonBlock, s ); }
Keyword       <- "json" / "sub"   / "if"  / "do" / "while" / "for"
               / "in"   / "out"   / "err" / "include"
               / "true" / "false" / "env" / "arg" / "local"
               / "return" / "break" / "continue"
               / "async" / "redir" / "and" / "or" / "not"
               / "push" / "pop"
StrBlock      <- "\"\"\"" < ( !"\"\"\"" . )* > "\"\"\""              { NS( String ); }
StrLiteral    <- ( (["] < [^"]* > ["]) / (['] < [^']* > [']) )       { NS( String ); }
Command       <- < W ( W / '-' )* >                                  { NS( String ); }
Identifier    <- !Keyword < ( W / '-' )+ >                           { NS( Identifier); }
ArgShort      <- '-' < W+ >                                          { NS( ArgShort ); }
ArgLong       <- "--" < ( W ('-' W )*)+ >                            { NS( ArgLong ); }
String        <- < S+ >                                              { NS( String ); }
Integer       <- < [0-9]+ >                                          { NS( Integer ); }
Path          <- < ("."* "/" S+ ) / "." >                            { NS( Path ); }
Variable      <- '$' < (W / '-')+ >                                  { NS( Variable ); }
Boolean       <- < "true" / "false" >                                { NS( Boolean ); }
Stream        <- &[ioe] ( s:StreamIn / s:StreamOut / s:StreamErr )   { DK( Stream, s ); }
StreamIn      <- "in"                                                { DK( StreamIn ); }
StreamOut     <- "out"                                               { DK( StreamOut ); }
StreamErr     <- "err"                                               { DK( StreamErr ); }
AssignOp      <- "="                                                 { DK( AssignOp ); }
AppendOp      <- "+="                                                { DK( AppendOp ); }
RemoveOp      <- "-="                                                { DK( RemoveOp ); }
RedirOp       <-
              (  o:RedirAppendOp / o:RedirReadOp
              /  o:RedirWriteOp / o:RedirDuplexOp
              )                                                      { DK( RedirOp, o ); }
RedirAppendOp <- ">>"                                                { DK( RedirAppendOp ); }
RedirReadOp   <- "<"                                                 { DK( RedirReadOp ); }
RedirWriteOp  <- ">"                                                 { DK( RedirWriteOp ); }
RedirDuplexOp <- "<>"                                                { DK( RedirDuplexOp ); }
DefaultOp     <- "|="                                                { DK( DefaultOp ); }
S             <- [^ \n\r\t]
W             <- [A-Za-z0-9-]
_             <- [ \n\r\t]*

%%

int packcc_main(const char *input, int len, void *p)
{
	struct deli_t auxil = {
		input: input,
		offset: 0,
		length: len,
		parser: p,
	};
	//printf("%x", p);
	deli_context_t *ctx = deli_create(&auxil);
	while(deli_parse(ctx, NULL));
	deli_destroy(ctx);
	return 0;
}
