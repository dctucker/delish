%prefix "deli"

%auxil "struct deli_t *"

%header {
	#include "delikind.h"
	struct deli_t {
		const char *input;
		size_t offset;
		size_t length;
		void *parser;
	};
}

%source {
	#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
		if( !( dk##rule == dkComment || dk##rule == dkVLine || dk##rule > dkDefaultOp ) ) \
			deli_event(auxil, event, dk##rule, level, pos, buffer, length)
	#define PCC_GETCHAR(auxil) deli_get_character( auxil )
	#define PCC_BUFFERSIZE 1024

	#define NS(K)       __ = nodeString( auxil->parser, dk##K   , _1s, _1e, _1)
	#define CN(N, K, ...) __ = createNode##N( auxil->parser, dk##K, __VA_ARGS__ )
	#define CN0(K) __ = createNode0( auxil->parser, dk##K )
	#define CN1(K, ...) CN(1, K, __VA_ARGS__ )
	#define CN2(K, ...) CN(2, K, __VA_ARGS__ )
	#define CN3(K, ...) CN(3, K, __VA_ARGS__ )
	#define NA(P,S)     nodeAppend( auxil->parser, P, S )
	#define SL(X)       setLine( auxil->parser, X, _0s )

	int deli_get_character( struct deli_t *auxil )
	{
		if( auxil->offset >= auxil->length )
			return -1;
		return (auxil)->input[ auxil->offset++ ];
	}
}

Script        <- c:Code                                              { CN1( Script, c ); }
Code          <-                                                     { CN0( Code ); }
              (  Blank* l:VLine                                      { if( l >= 0 ) NA( $$, l ); }
              )+ Blank*
Blank         <- ( "\\" "\n" ) / "\t" / ' '
VLine         <- ( "\n"                                              { $$ = -1; }
                 / Comment                                           { $$ = -1; }
                 / a:Block                                           { $$ = a; }
                 / a:Statement Comment* "\n"                         { $$ = a; }
                 )                                                   { if( $$ >= 0 ) SL($$); }
Comment       <- '#' (! "\n" .)* "\n"
Block         <- ( !'$'
               ( a:Conditional / a:WhileLoop / a:ForLoop / a:Function
               ) / a:Subshell
              )                                                      { CN1( Block    , a ); SL(a); }
Statement     <-
              (  a:VariableStmt /  a:LocalStmt    /  a:ArgStmt
              /  a:EnvStmt      /  a:IncludeStmt  /  a:StreamStmt
              /  a:RunStmt      /  a:FunctionStmt /  a:BreakStmt
              /  a:ContinueStmt /  a:ReturnStmt   /  a:Push / a:Pop
              )                                                      { CN1( Statement  , a ); SL(a); }
Conditional   <- "if" Blank+ e:Expr
                 Blank+ "{" _ c:Code? _ "}" _                        { CN2( Conditional, e, c ); }
WhileLoop     <- "while" Blank+ e:Expr
                 Blank+ "{" _ c:Code? _ "}" _                        { CN2( WhileLoop  , e, c ); }
ForLoop       <- "for" Blank+ v:Variable Blank+ "in" Blank+ e:Expr
                 Blank+ "{" _ c:Code? _ "}" _                        { CN3( ForLoop    , v, e, c ); }
Function      <- !Keyword i:Identifier Blank*        "="
                 Blank* "{" _ c:Code? _ "}" _                        { CN2( Function   , i, c ); }
Subshell      <- "sub" Blank+ "{" _ c:Code? _ "}" _                  { CN1( Subshell   , c ); }
BreakStmt     <- "break"                                             { CN0( BreakStmt ); }
ContinueStmt  <- "continue"                                          { CN0( ContinueStmt ); }
ReturnStmt    <- "return"                                            { CN0( ReturnStmt ); }
Push          <- "push"                                              { CN0( Push ); }
Pop           <- "pop"                                               { CN0( Pop ); }
VariableStmt  <- &'$' v:Variable Blank*
              (  o:AssignOp Blank*
               ( e:OpenExpr / e:ArgExpr / e:Expr / e:RunStmt )
              /  o:AppendOp Blank*
               ( e:ArgExpr / e:Expr / e:RunStmt )
              /  o:RemoveOp Blank*
               ( e:ArgExpr / e:Expr / e:RunStmt )
              )                                                      { CN3( VariableStmt, v, o, e ); }
OpenExpr      <- "open" (Blank+ o:RedirOp)? Blank+ p:Path            { CN2( OpenExpr, p, o); }
LocalStmt     <- "local" Blank+ v:Variable                           { CN1( LocalStmt, v ); }
              (  Blank* "=" Blank* e:Expr                            { NA( $$, e ); }
              )?
ArgStmt       <- "arg"
                 ( a:ArgNames Blank* o:DefaultOp Blank* d:ArgDefault { CN3( ArgStmt, a, o, d); }
                 / a:ArgNames                                        { CN1( ArgStmt, a); }
                 )
EnvStmt       <- "env" Blank+ v:Variable                             { CN1( EnvStmt, v ); }
                 (Blank* o:DefaultOp Blank* e:EnvDefault             { NA( $$, o ); NA( $$, e ); }
                 )?
IncludeStmt   <- "include" Blank+ s:StrLiteral                       { CN1( IncludeStmt, s ); }
StreamStmt    <- ( v:Variable "." s:Stream Blank+ l:ExprList         { CN3( StreamStmt,  v, s, l ); }
              /                   s:Stream Blank+ l:ExprList         { CN2( StreamStmt,  s, l ); }
              )
RunStmt       <- (
               ( f1:AsyncFlag / f2:RedirFlag
               / (f1:AsyncFlag f2:RedirFlag)
               ) Blank+
              )? "run" Blank+ i:Invocation                           { CN1( RunStmt, i ); }
              (  Blank* "|" Blank* i:Invocation                      { NA( $$, i ); }
              )*
FunctionStmt  <- i:Identifier                                        { CN1( FunctionStmt, i ); SL(i); }
               ( Blank+ e:Expr                                       { NA( $$, e ); }
               )*
ArgDefault    <- e:Expr                                              { CN1( ArgDefault, e ); }
EnvDefault    <- e:Expr                                              { CN1( EnvDefault, e ); }
ExprList      <- e:Expr                                              { CN1( ExprList, e ); }
               ( Blank* ',' Blank* e:Expr Blank*                     { NA( $$, e ); }
               )*
Invocation    <- c:Command                                           { CN1( Invocation, c ); }
              (  Blank+ !'|' (e:Expr / e:String)                     { NA( $$, e ); }
              )*
ArgExpr       <- a:Arg (Blank+ / '=') e:Expr?                        { CN2( ArgExpr, a, e ); }
Expr          <-
               ( s:VarDeref / s:Arg        / s:Array   / s:Object
               / s:StrBlock / s:StrLiteral / s:Integer / s:Boolean
               / s:Path     / s:JsonBlock  / s:Stream  / s:BoolExpr
               )                                                     { CN1( Expr, s); }
BoolExpr      <- c:Comparison                                        { CN1( BoolExpr, c ); }
              (  o:BoolOp c:Comparison                               { CN3( BoolExpr, o, $$, c ); }
              )*
BoolOp        <- o:BoolOr / o:BoolAnd                                { CN1( BoolOp, o ); }
BoolOr        <- "or"                                                { CN0( BoolOr ); }
BoolAnd       <- "and"                                               { CN0( BoolAnd ); }
Comparison    <- e1:Expr o:Comparator e2:Expr                        { CN3( Comparison, o, e1, e2 ); }
Comparator    <- ( o:CompGe / o:CompGt
               /   o:CompLe / o:CompLt
               /   o:CompEq / o:CompNe )                             { $$ = o; }
CompGe        <- ">="                                                { CN0( CompGe ); }
CompGt        <- ">"                                                 { CN0( CompGt ); }
CompLe        <- "<="                                                { CN0( CompLe ); }
CompLt        <- "<"                                                 { CN0( CompLt ); }
CompEq        <- "=="                                                { CN0( CompEq ); }
CompNe        <- "!="                                                { CN0( CompNe ); }
VarDeref      <- &'$' n:Variable                                     { CN1( VarDeref, n ); }
              (  [.]
               ( s:StrLiteral / s:Integer
               / s:Variable   / s:Identifier  )                      { NA( $$, s ); }
              )*
RedirFlag     <- "redir"
              (  Blank+
               ( Variable / Path / Stream ) Blank*
                 RedirOp Blank*
               ( Variable / Path / Stream )
              )+
AsyncFlag     <- "async"
ArgNames      <- ( Blank+ a:Arg )+                                   { CN1( ArgNames, a); }
Arg           <- &'-'
              (  l:ArgLong                                           { CN1( Arg, l ); }
              /  s:ArgShort                                          { CN1( Arg, s ); }
              )
Array         <- '['                                                 { CN0( Array ); }
              (  _ e:Expr                                            { NA( $$, e ); }
                 Blank* ','? _
              )* ']'
Object        <- '['                                                 { CN0( Object ); }
              (  _ p:Pair                                            { NA( $$, p ); }
                 Blank* ','? _
              )+ ']'
Pair          <- k:Expr Blank* ':' Blank* v:Expr                     { CN2( Pair, k, v ); }
JsonBlock     <- "json" Blank+ s:StrBlock                            { CN1( JsonBlock, s ); }
Keyword       <- "json" / "sub"   / "if"  / "while"  / "arg"
               / "in"   / "out"   / "err" / "include"
               / "true" / "false" / "env" / "break" / "continue"
StrBlock      <- "\"\"\"" < ( !"\"\"\"" . )* > "\"\"\""              { NS( String    ); }
StrLiteral    <- ( (["] < [^"]* > ["]) / (['] < [^']* > [']) )       { NS( String    ); }
Command       <- < W ( W / '-' )* >                                  { NS( Command   ); }
Identifier    <- !Keyword < ( W / '-' )+ >                           { NS( Identifier); }
ArgShort      <- '-' < W+ >                                          { NS( ArgShort  ); }
ArgLong       <- "--" < ( W ('-' W )*)+ >                            { NS( ArgLong   ); }
String        <- < S+ >                                              { NS( String    ); }
Integer       <- < [0-9]+ >                                          { NS( Integer   ); }
Path          <- < ("."* "/" S+ ) / "." >                            { NS( Path      ); }
Variable      <- '$' < (W / '-')+ >                                  { NS( Variable  ); }
Boolean       <- < "true" / "false" >                                { NS( Boolean   ); }
Stream        <- &[ioe] ( s:StreamIn / s:StreamOut / s:StreamErr )   { CN1( Stream, s ); }
StreamIn      <- "in"                                                { CN0( StreamIn ); }
StreamOut     <- "out"                                               { CN0( StreamOut ); }
StreamErr     <- "err"                                               { CN0( StreamErr ); }
AssignOp      <- "="                                                 { CN0( AssignOp ); }
AppendOp      <- "+="                                                { CN0( AppendOp ); }
RemoveOp      <- "-="                                                { CN0( RemoveOp ); }
RedirOp       <- ( o:RedirAppendOp / o:RedirReadOp
               / o:RedirWriteOp / o:RedirDuplexOp )                  { CN1( RedirOp, o ); }
RedirAppendOp <- ">>"                                                { CN0( RedirAppendOp ); }
RedirReadOp   <- "<"                                                 { CN0( RedirReadOp ); }
RedirWriteOp  <- ">"                                                 { CN0( RedirWriteOp ); }
RedirDuplexOp <- "<>"                                                { CN0( RedirDuplexOp ); }
DefaultOp     <- "|="                                                { CN0( DefaultOp ); }
S             <- [^ \n\r\t]
W             <- [A-Za-z0-9-]
_             <- [ \n\r\t]*

%%

int packcc_main(const char *input, int len, void *p)
{
	struct deli_t auxil = {
		input: input,
		offset: 0,
		length: len,
		parser: p,
	};
	//printf("%x", p);
	deli_context_t *ctx = deli_create(&auxil);
	while(deli_parse(ctx, NULL));
	deli_destroy(ctx);
	return 0;
}
