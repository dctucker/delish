%prefix "deli"

%auxil "struct deli_t *"

%header {
	#include "stdarg.h"
	#include "delikind.h"
	struct deli_t {
		const char *input;
		size_t offset;
		size_t length;
		void *parser;
	};
	
	#define PCC_DEBUG(auxil, event, rule, level, pos, buffer, length) \
		if( !( dk##rule == dkComment || dk##rule == dkVLine || dk##rule > dkDefaultOp ) ) \
			deli_event(auxil->parser, event, dk##rule, level, pos, buffer, length)
	#define PCC_GETCHAR(auxil) deli_get_character( auxil )
	#define PCC_BUFFERSIZE 1024
	#define PCC_ERROR(auxil) pcc_error(); return 0;
	static void pcc_error(void) {
		fprintf(stderr, "Syntax error\n");
	}

	#define NS(K)       __ = nodeString( auxil->parser, dk##K   , _1s, _1e, _1)
	#define CN(N, K, ...) __ = createNode##N( auxil->parser, dk##K, __VA_ARGS__ )
	#define CN0(K) __ = createNode0( auxil->parser, dk##K )
	#define CN1(K, ...) CN(1, K, __VA_ARGS__ )
	#define CN2(K, ...) CN(2, K, __VA_ARGS__ )
	#define CN3(K, ...) CN(3, K, __VA_ARGS__ )
	#define NA(P,S)     nodeAppend( auxil->parser, P, S )
	#define SL(X)       setLine( auxil->parser, X, _0s )
	#define ER(MSG)     parserError( auxil->parser, MSG );
	// fprintf(stderr, "Parsing error: %s\n", MSG)

	#define GET_DK( _1, _2, _3, _4, NAME, ...) NAME
	#define DK(...) GET_DK( __VA_ARGS__, CN3, CN2, CN1, CN0)(__VA_ARGS__)

	int nodeAppend(void*, int, int);
	int createNode0(void*, int);
	int createNode1(void*, int, int);
	int createNode2(void*, int, int, int);
	int createNode3(void*, int, int, int, int);
	int nodeString(void*, int, size_t, size_t, char*);
	int parserError(void*, char*);
	int setLine(void*, int, int);
	void deli_event(void*, int, int, int, size_t, char*, size_t);
}

%source {

	int deli_get_character( struct deli_t *auxil )
	{
		if( auxil->offset >= auxil->length )
			return -1;
		return (auxil)->input[ auxil->offset++ ];
	}
}

Script        <- c:Code                                              { DK( Script, c ); }
Code          <-                                                     { DK( Code ); }
              (  S* l:VLine                                          { if( l >= 0 ) NA( $$, l ); }
              )+ S*
S             <- ( "\\" "\n" ) / "\t" / ' '
VLine         <-
              (  "\n"                                                { $$ = -1; }
              /  Comment                                             { $$ = -1; }
              /  a:Block                                             { $$ = a; }
              /  a:Statement Comment* "\n"                           { $$ = a; }
              )                                                      { if( $$ >= 0 ) SL($$); }
Comment       <- '#' (! "\n" .)* "\n"
Block         <-
              (  !'$'
               ( a:Conditional / a:DoLoop / a:WhileLoop / a:ForLoop
               / a:Function
               )
              /  a:Subshell
              )                                                      { DK( Block    , a ); SL(a); }
Statement     <-
              (  a:VariableStmt / a:LocalStmt   / a:ArgStmt
              /  a:EnvStmt      / a:IncludeStmt / a:StreamStmt
              /  a:CloseStmt    / a:RunStmt
              /  a:FunctionStmt / a:BreakStmt
              /  a:ContinueStmt / a:ReturnStmt  / a:Push / a:Pop )  ~{ ER("invalid statement"); }
                                                                     { DK( Statement  , a ); SL(a); }

Conditional   <- "if"      S+ e:Condition                           ~{ ER("expected condition after `if`"); }
                           S+ c:Body _                               { DK( Conditional, e, c ); }

WhileLoop     <- "while"   S+ e:Condition                           ~{ ER("expected condition after `while`"); }
                           S+ c:Body _                               { DK( WhileLoop  , e, c ); }

DoLoop        <- "do"      S+ c:Body                                ~{ ER("expected body after `do`"); }
                 _ "while" S+ e:Condition                           ~{ ER("expected condition after `while`"); }
                                                                         { DK( DoLoop     , c, e ); }

ForLoop       <- "for"     S+ v:Variable                            ~{ ER("expected variable after `for`"); }
                           S+ "in"                                  ~{ ER("expected `in` after variable"); }
                           S+ e:IterExpr                            ~{ ER("expected iterable after `in`"); }
                           S+ c:Body                                ~{ ER("expected body after iterable"); }
                           _                                         { DK( ForLoop    , v, e, c ); }

Function      <- !Keyword i:Identifier S* "="
                                       S* c:Body                    ~{ ER("expected body after function definition"); }
                                       _                             { DK( Function   , i, c ); }

Subshell      <- "sub" S+ c:Body                                    ~{ ER("expected body after `sub`"); }
                       _                                             { DK( Subshell   , c ); }

BreakStmt     <- "break"                                             { DK( BreakStmt ); }
ContinueStmt  <- "continue"                                          { DK( ContinueStmt ); }

ReturnStmt    <- "return"                                            { DK( ReturnStmt ); }
              (  S+ e:Expr                                          ~{ ER("invalid return expression"); }
                                                                     { NA( $$, e ); }
              )?

Push          <- "push"                                              { DK( Push ); }
Pop           <- "pop"                                               { DK( Pop ); }

VariableStmt  <- &'$' v:Variable                                    ~{ ER("invalid variable name"); }
                            S*
              (  o:AssignOp S* e:AssignExpr                         ~{ ER("invalid expression after `=`"); }
              /  o:AppendOp S* e:AppendExpr                         ~{ ER("invalid expression after `+=`"); }
              /  o:RemoveOp S* e:AppendExpr                         ~{ ER("invalid expression after `-=`"); }
              )                                                      { DK( VariableStmt, v, o, e ); }

AppendExpr    <- ( e:ArgExpr / e:Arg / e:VarDeref / e:ConstExpr )    { $$ = e; }

OpenExpr      <- "open" (S+ o:RedirOp)? S+ p:Path                   ~{ ER("expected path after `open`"); }
                                                                     { DK( OpenExpr, p, o); }
CloseStmt     <-
              (  "close" S+ v:Variable                              ~{ ER("expected variable after `close`"); }
              /  v:Variable ".close"
              )                                                      { DK( CloseStmt, v ); }

LocalStmt     <- "local" S+ v:Variable                              ~{ ER("expected variable after `local`"); }
                                                                     { DK( LocalStmt, v ); }
              (  S* o:AssignOp S* e:AssignExpr                       { NA( $$, o ); NA( $$, e ); }
              )?
AssignExpr    <-
              (  e:OpenExpr / e:ArgExpr /  e:RunStmt
              /  e:FunctionCall /  e:Expr
              )                                                      { $$ = e; }

ArgStmt       <- "arg"
              (  a:ArgNames S* o:DefaultOp S* d:ArgDefault           { DK( ArgStmt, a, o, d); }
              /  a:ArgNames                                          { DK( ArgStmt, a); }
              /  S+ v:Variable                                       { DK( ArgStmt, v); }
              )                                                     ~{ ER("argument must be flags or a variable") }

EnvStmt       <- "env" S+ v:Variable                                ~{ ER("expected variable after `env`"); }
                                                                     { DK( EnvStmt, v ); }
              (  S* o:DefaultOp S* e:EnvDefault                     ~{ ER("expected constant expression after `|=`"); }
                                                                     { NA( $$, o ); NA( $$, e ); }
              /  S* o:AssignOp  S* e:Expr                           ~{ ER("expected expression after `=`"); }
                                                                     { NA( $$, o ); NA( $$, e ); }
              )?

IncludeStmt   <- "include" S+ s:StrLiteral                          ~{ ER("expected string literal after `include`"); }
                                                                     { DK( IncludeStmt, s ); }

StreamStmt    <-
              (  v:Variable "." s:Stream S+ l:ExprList              ~{ ER("expected expressions after stream statement"); }
                                                                     { DK( StreamStmt,  v, s, l ); }
              /                 s:Stream S+ l:ExprList              ~{ ER("expected expressions after stream statement"); }
                                                                     { DK( StreamStmt,  s, l ); }
              )

RunStmt       <-
              (  f:RunFlags S+ "run"                                 { DK( RunStmt, f ); }
              /  "run"                                               { DK( RunStmt ); }
              )  S+ i:Invocation                                    ~{ ER("expected invocation after `run`"); }
                                                                     { NA( $$, i ); }
              (  S* "|" S* i:Invocation                             ~{ ER("expected invocation after `|`"); }
                                                                     { NA( $$, i ); }
              )*

RunFlags      <-
              (  f:AsyncFlag                                         { DK( RunFlags, f ); }
              /  f:RedirFlag                                         { DK( RunFlags, f ); }
              /  (f1:AsyncFlag f2:RedirFlag)                         { DK( RunFlags, f1, f2 ); }
              )

FunctionStmt  <- !Keyword c:FunctionCall                             { DK( FunctionStmt, c ); SL(c); }
FunctionCall  <- !Keyword
              (  i:Identifier                                        { DK( FunctionCall, i ); }
              /  v:Variable '.' i:Identifier                         { DK( FunctionCall, DK( VarDeref, v, i ) ); }
              )
              (  S+ e:Expr                                           { NA( $$, e ); }
              )*

ArgDefault    <- e:ConstExpr                                         { DK( ArgDefault, e ); }
EnvDefault    <- e:ConstExpr                                         { DK( EnvDefault, e ); }

ExprList      <- e:Expr                                              { DK( ExprList, e ); }
              (  S* ',' S* e:Expr                                   ~{ ER("expected expression after `,`"); }
                 S*                                                  { NA( $$, e ); }
              )*

Invocation    <- c:Command                                           { DK( Invocation, c ); }
              (  S+ !'|' (e:Expr / e:String)                         { NA( $$, e ); }
              )*

ArgExpr       <- a:Arg (S+ / '=') e:Expr?                            { DK( ArgExpr, a, e ); }

ConstExpr     <-
              (  e:Integer / e:StrBlock / e:StrLiteral
              /  e:Boolean / e:Array / e:Object
              /  e:Path / e:JsonBlock
              )                                                      { $$ = e; }

Expr          <-
              (  [(] S* s:MathExpr S* [)]
              /  s:Array / s:Object
              /  s:Arg / s:VarDeref
              /  s:StrBlock / s:StrLiteral / s:Regex
              /  s:Integer / s:Boolean
              /  s:BoolExpr
              /  s:Path     / s:JsonBlock  / s:Stream
              /  s:Cast
              )                                                      { DK( Expr, s); }

IterExpr      <- ( s:Array / s:VarDeref )                            { $$ = s; }

Condition     <- a:OrExpr                                            { $$ = a; }
OrExpr        <- l:OrExpr  S+ o:BoolOr  S+ r:AndExpr                 { DK( CondExpr, o, l, r); }
               /                           r:AndExpr                 { $$ = r; }
AndExpr       <- l:AndExpr S+ o:BoolAnd S+ r:NotExpr                 { DK( CondExpr, o, l, r); }
               /                           r:NotExpr                 { $$ = r; }
NotExpr       <- o:BoolNot S+ r:CondExpr                             { $$ = o; NA($$, r); }
               /              r:CondExpr                             { $$ = r; }
CondExpr      <- ( s:Arg / s:BoolExpr / s:VarDeref / s:Boolean )     { $$ = s; }

MathExpr      <- a:AddExpr                                           { $$ = a; }
AddExpr       <- l:AddExpr S+ ( o:AddOp / o:SubOp ) S+ r:MulExpr     { DK( MathExpr, o, l, r ); }
               /                                       r:MulExpr     { $$ = r; }
MulExpr       <- l:MulExpr S+ (o:MulOp / o:DivOp / o:ModOp)
                           S+ r:PrimExpr                             { DK( MathExpr, o, l, r ); }
               /              r:PrimExpr                             { $$ = r; }
PrimExpr      <- e:Expr                                              { $$ = e; }

MulOp         <- "*"                                                 { DK( MulOp ); }
DivOp         <- "/"                                                 { DK( DivOp ); }
ModOp         <- "%"                                                 { DK( ModOp ); }
AddOp         <- "+"                                                 { DK( AddOp ); }
SubOp         <- "-"                                                 { DK( SubOp ); }

BoolExpr      <-
              (      n:BoolNot S+ c:Comparison                       { DK( BoolExpr, n ); NA(n, c); }
               /                  c:Comparison                       { DK( BoolExpr, c ); }
              )(  S+ o:BoolOp2 S+ b:BoolExpr                         { DK( BoolExpr, o, $$, c); }
              )*

BoolOp2       <- o:BoolOr / o:BoolAnd                                { DK( BoolOp2, o ); }
BoolNot       <- "not"                                               { DK( BoolNot ); }
BoolOr        <- "or"                                                { DK( BoolOr ); }
BoolAnd       <- "and"                                               { DK( BoolAnd ); }

Comparison    <- e1:CompExpr S+ o:Comparator S+ e2:CompExpr         ~{ ER("expected comparable expression after operator"); }
                                                                     { DK( Comparison, o, e1, e2 ); }
CompExpr      <-
              (  s:VarDeref / s:StrBlock / s:StrLiteral / s:Regex
              /  s:Integer / s:Boolean / s:Path / s:Arg
              )                                                      { $$ = s; }
Comparator    <-
              (  o:CompGe / o:CompGt / o:CompLe / o:CompLt
              /  o:CompEq / o:CompNe / o:CompMatch
              )                                                      { $$ = o; }
CompGe        <- ">="                                                { DK( CompGe ); }
CompGt        <- ">"                                                 { DK( CompGt ); }
CompLe        <- "<="                                                { DK( CompLe ); }
CompLt        <- "<"                                                 { DK( CompLt ); }
CompEq        <- "=="                                                { DK( CompEq ); }
CompNe        <- "!="                                                { DK( CompNe ); }
CompMatch     <- "=~"                                                { DK( CompMatch ); }

VarDeref      <- &'$' n:Variable                                     { DK( VarDeref, n ); }
              (  "."
               ( s:StrLiteral / s:Integer
               / s:Variable   / s:Identifier  )                     ~{ ER("expected literal, variable or identifier after `.`"); }
                                                                     { NA( $$, s ); }
              )*

RedirFlag     <- "redir"                                             { DK( RedirFlag ); }
              (  S+
               ( i:VarDeref / i:Path / i:Stream )                   ~{ ER("expected source after `redir`"); }
                 S* r:RedirOp S*                                    ~{ ER("expected operator"); }
               ( o:VarDeref / o:Path / o:Stream )                   ~{ ER("expected destination after operator"); }
                                                                     { NA( r, i ); NA( r, o ); NA( $$, r ); }
              )+

AsyncFlag     <- "async"                                             { DK( AsyncFlag ); }

ArgNames      <- S+ a:Arg                                            { DK( ArgNames, a); }
              (  S+ a:Arg                                            { NA( $$, a); }
              )*

Arg           <- &'-'
              (  l:ArgLong                                           { DK( Arg, l ); }
              /  s:ArgShort                                          { DK( Arg, s ); }
              )                                                     ~{ ER("invalid argument name"); }

Array         <- "[" S* "]"                                          { DK( Array ); }
              /  '['                                                 { DK( Array ); }
              (  _ e:Expr                                            { NA( $$, e ); }
                 S* ','? _
              )* ']'

Object        <- '['                                                 { DK( Object ); }
              (     _  p:Pair                                        { NA( $$, p ); }
                    S*       ','? _
              )+ ']'

Pair          <- k:Expr       S* ':' S* v:Expr                      ~{ ER("expected expression after `:`"); }
                                                                     { DK( Pair, k, v ); }
              /  i:Identifier S* ":" S* c:Body                      ~{ ER("expected body after `:`"); }
                                                                     { DK( Pair, i, c ); }

Body          <- "{" _ c:Code _ "}"                                  { $$ = c; }

JsonBlock     <- "json" S+ s:StrBlock                               ~{ ER("expected string literal block after `json`"); }
                                                                     { DK( JsonBlock, s ); }

Keyword       <- ( "json" / "sub"   / "if"  / "do" / "while" / "for"
              /  "in"   / "out"   / "err" / "include"
              /  "true" / "false" / "env" / "arg" / "local"
              /  "return" / "break" / "continue"
              /  "async" / "redir" / "and" / "or" / "not"
              /  "push" / "pop" / "open" / "close" / "run" )

Cast          <- t:Type S* "(" e:Expr                               ~{ ER("expected expression within `()`"); }
                                          ")"                        { DK( Cast, t, e ); }
Type          <- "Integer"                                           { DK( Integer ); }
              /  "Arg"                                               { DK( Arg ); }
              /  "Array"                                             { DK( Array ); }
              /  "Boolean"                                           { DK( Boolean ); }
              /  "Identifier"                                        { DK( Identifier ); }
              /  "Path"                                              { DK( Path ); }
              /  "Object"                                            { DK( Object ); }
              /  "Regex"                                             { DK( Regex ); }
              /  "Stream"                                            { DK( Stream ); }
              /  "String"                                            { DK( String ); }
              /  "Variable"                                          { DK( Variable ); }

StrBlock      <- "\"\"\"" < ( !"\"\"\"" . )* > "\"\"\""              { NS( String ); }
StrLiteral    <- ( (["] < [^"]* > ["]) / (['] < [^']* > [']) )       { NS( String ); }
Command       <- < W ( W / '-' )* >                                  { NS( String ); }
Identifier    <- < A ( W / '-' )* >                                  { NS( Identifier); }
ArgShort      <- '-' < W+ >                                          { NS( ArgShort ); }
ArgLong       <- "--" < ( W ('-' W )*)+ >                            { NS( ArgLong ); }
String        <- < C+ >                                              { NS( String ); }
Regex         <- 'r/' < ( '\/' / !'/' . )+ > '/'                     { NS( Regex ); }
Integer       <- < [0-9]+ >                                          { NS( Integer ); }
Path          <- < ("."* "/" C+ ) / "." >                            { NS( Path ); }
Variable      <- '$' < W (W / '-')* >                                { NS( Variable ); }
Boolean       <- < "true" / "false" >                                { NS( Boolean ); }
Stream        <- &[ioe] ( s:StreamIn / s:StreamOut / s:StreamErr )   { DK( Stream, s ); }
StreamIn      <- "in"                                                { DK( StreamIn ); }
StreamOut     <- "out"                                               { DK( StreamOut ); }
StreamErr     <- "err"                                               { DK( StreamErr ); }
AssignOp      <- "="                                                 { DK( AssignOp ); }
AppendOp      <- "+="                                                { DK( AppendOp ); }
RemoveOp      <- "-="                                                { DK( RemoveOp ); }
RedirOp       <-
              (  o:RedirAppendOp / o:RedirReadOp
              /  o:RedirWriteOp / o:RedirDuplexOp
              )                                                      { DK( RedirOp, o ); }
RedirAppendOp <- ">>"                                                { DK( RedirAppendOp ); }
RedirReadOp   <- "<"                                                 { DK( RedirReadOp ); }
RedirWriteOp  <- ">"                                                 { DK( RedirWriteOp ); }
RedirDuplexOp <- "<>"                                                { DK( RedirDuplexOp ); }
DefaultOp     <- "|="                                                { DK( DefaultOp ); }
C             <- [^ \n\r\t]
A             <- [A-Za-z]
W             <- [A-Za-z0-9_]
_             <- [ \n\r\t]*

%%

int packcc_main(const char *input, int len, void *p)
{
	struct deli_t auxil = {
		input: input,
		offset: 0,
		length: len,
		parser: p,
	};
	//printf("%x", p);
	deli_context_t *ctx = deli_create(&auxil);
	while(deli_parse(ctx, NULL));
	deli_destroy(ctx);
	return 0;
}
